jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  strategy:
    matrix:
      Linux:
        vmImage: ubuntu-16.04
        rust_version: ${{ parameters.rust }}

      ${{ if parameters.cross }}:
        MacOS:
          vmImage: macos-latest
          rust_version: 1.43.1 # https://github.com/rust-lang/rust/issues/73030
        Windows:
          vmImage: vs2017-win2016
          rust_version: ${{ parameters.rust }}
  pool:
    vmImage: $(vmImage)

  steps:
  - template: azure-install-rust.yml
    parameters:
      rust_version: $(rust_version)

  - template: azure-is-release.yml

  # Run `tokio` with only `full`
  - script: cargo test --features full
    env:
      RUST_BACKTRACE: 1
      CI: 'True'
    displayName: tokio - cargo test --features full
    workingDirectory: $(Build.SourcesDirectory)/tokio

  # Run `tokio` with "unstable" cfg flag
  - script: cargo test --all-features
    env:
      RUSTFLAGS: '--cfg tokio_unstable'
      RUST_BACKTRACE: 1
      CI: 'True'
    displayName: tokio - cargo test --features full
    workingDirectory: $(Build.SourcesDirectory)/tokio

  - ${{ each crate in parameters.crates }}:
    # Run with all crate features
    - script: cargo test --all-features
      env:
        RUST_BACKTRACE: 1
        CI: 'True'
      displayName: ${{ crate }} - cargo test --all-features
      workingDirectory: $(Build.SourcesDirectory)/${{ crate }}

    # Check benches
    - script: cargo check --all-features --benches
      displayName: ${{ crate }} - cargo check --benches
      workingDirectory: $(Build.SourcesDirectory)/${{ crate }}

  - template: azure-patch-crates.yml

  - ${{ each crate in parameters.crates }}:
    # Run with all crate features
    - script: cargo test --all-features
      env:
        RUST_BACKTRACE: 1
        CI: 'True'
      displayName: ${{ crate }} - cargo test --all-features
      workingDirectory: $(Build.SourcesDirectory)/${{ crate }}
