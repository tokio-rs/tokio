jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  strategy:
    matrix:
      Linux:
        vmImage: ubuntu-16.04

      ${{ if parameters.cross }}:
        MacOS:
          vmImage: macOS-10.13
        Windows:
          vmImage: vs2017-win2016
  pool:
    vmImage: $(vmImage)

  steps:
  - template: azure-install-rust.yml
    parameters:
      # rust_version: stable
      rust_version: ${{ parameters.rust }}

#   - template: azure-is-release.yml
#
#   - ${{ each crate in parameters.crates }}:
#     - script: cargo test
#       env:
#         LOOM_MAX_DURATION: 10
#         CI: 'True'
#       displayName: cargo test -p ${{ crate }}
#       workingDirectory: $(Build.SourcesDirectory)/${{ crate }}
#       condition: and(succeeded(), ne(variables['isRelease'], 'true'))

  - template: azure-patch-crates.yml

  - ${{ each crate in parameters.crates }}:
    # Run with default crate features
    - script: cargo test --tests
      env:
        LOOM_MAX_DURATION: 10
        CI: 'True'
      displayName: cargo test --tests
      workingDirectory: $(Build.SourcesDirectory)/${{ crate.key }}
    - script: cargo test --examples
      displayName: cargo test --examples
      workingDirectory: $(Build.SourcesDirectory)/${{ crate.key }}

    # Run with each specified feature
    - ${{ each feature in crate.value }}:
      - script: cargo test --tests --no-default-features --features ${{ feature }}
        env:
          LOOM_MAX_DURATION: 10
          CI: 'True'
        displayName: cargo test --tests --features ${{ feature }}
        workingDirectory: $(Build.SourcesDirectory)/${{ crate.key }}

      - script: cargo test --examples --no-default-features --features ${{ feature }}
        displayName: cargo test --examples --features ${{ feature }}
        workingDirectory: $(Build.SourcesDirectory)/${{ crate.key }}
