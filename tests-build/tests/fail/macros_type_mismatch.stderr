error[E0308]: mismatched types
 --> tests/fail/macros_type_mismatch.rs:5:5
  |
5 |     Ok(())
  |     ^^^^^^ expected `()`, found `Result<(), _>`
  |
  = note: expected unit type `()`
                  found enum `Result<(), _>`

error[E0308]: mismatched types
  --> tests/fail/macros_type_mismatch.rs:10:12
   |
10 |     return Ok(());
   |            ^^^^^^ expected `()`, found `Result<(), _>`
   |
   = note: expected unit type `()`
                   found enum `Result<(), _>`

error[E0308]: mismatched types
  --> tests/fail/macros_type_mismatch.rs:14:46
   |
14 |   async fn extra_semicolon() -> Result<(), ()> {
   |  ______________________________________________^
15 | |     Ok(());
   | |           - help: remove this semicolon to return this value
16 | | }
   | |_^ expected `Result<(), ()>`, found `()`
   |
   = note:   expected enum `Result<(), ()>`
           found unit type `()`

error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `FromResidual`)
  --> tests/fail/macros_type_mismatch.rs:40:9
   |
38 | #[tokio::main]
   | -------------- this function should return `Result` or `Option` to accept `?`
39 | async fn question_mark_operator_with_invalid_option() -> Option<()> {
40 |     None?;
   |         ^ cannot use the `?` operator in an async block that returns `()`
   |
   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`

error[E0308]: mismatched types
  --> tests/fail/macros_type_mismatch.rs:40:5
   |
39 | async fn question_mark_operator_with_invalid_option() -> Option<()> {
   |                                                          ---------- expected `Option<()>` because of return type
40 |     None?;
   |     ^^^^^^ expected `Option<()>`, found `()`
   |
   = note:   expected enum `Option<()>`
           found unit type `()`
help: try adding an expression at the end of the block
   |
40 ~     None?;;
41 +     None
   |
40 ~     None?;;
41 +     Some(())
   |

error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `FromResidual`)
  --> tests/fail/macros_type_mismatch.rs:57:11
   |
55 | #[tokio::main]
   | -------------- this function should return `Result` or `Option` to accept `?`
56 | async fn question_mark_operator_with_invalid_result() -> Result<(), ()> {
57 |     Ok(())?;
   |           ^ cannot use the `?` operator in an async block that returns `()`
   |
   = help: the trait `FromResidual<Result<Infallible, _>>` is not implemented for `()`

error[E0308]: mismatched types
  --> tests/fail/macros_type_mismatch.rs:57:5
   |
56 | async fn question_mark_operator_with_invalid_result() -> Result<(), ()> {
   |                                                          -------------- expected `Result<(), ()>` because of return type
57 |     Ok(())?;
   |     ^^^^^^^^ expected `Result<(), ()>`, found `()`
   |
   = note:   expected enum `Result<(), ()>`
           found unit type `()`
help: try adding an expression at the end of the block
   |
57 ~     Ok(())?;;
58 +     Ok(())
   |

error[E0308]: mismatched types
  --> tests/fail/macros_type_mismatch.rs:31:69
   |
31 |   async fn question_mark_operator_with_invalid_option() -> Option<()> {
   |  _____________________________________________________________________^
32 | |     None?;
   | |          - help: remove this semicolon to return this value
33 | | }
   | |_^ expected `Option<()>`, found `()`
   |
   = note:   expected enum `Option<()>`
           found unit type `()`

error[E0308]: mismatched types
  --> tests/fail/macros_type_mismatch.rs:48:73
   |
48 |   async fn question_mark_operator_with_invalid_result() -> Result<(), ()> {
   |  _________________________________________________________________________^
49 | |     Ok(())?;
50 | | }
   | |_^ expected `Result<(), ()>`, found `()`
   |
   = note:   expected enum `Result<(), ()>`
           found unit type `()`

error[E0308]: mismatched types
  --> tests/fail/macros_type_mismatch.rs:57:12
   |
56 | async fn issue_4635() {
   |                      - help: try adding a return type: `-> i32`
57 |     return 1;
   |            ^ expected `()`, found integer
